
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package com.compi.emuladorinstruccionsql.jcup;

import java_cup.runtime.*;
import com.compi.emuladorinstruccionsql.LectorCSV;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public analizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\016\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\003\003\000\002\003\004\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\004\007\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\027\000\006\002\uffff\004\005\001\002\000\006\002" +
    "\000\004\005\001\002\000\016\005\ufff4\016\014\017\011" +
    "\020\012\021\013\024\016\001\002\000\006\002\ufffe\004" +
    "\ufffe\001\002\000\004\002\010\001\002\000\004\002\001" +
    "\001\002\000\004\005\024\001\002\000\006\005\ufff5\015" +
    "\ufff5\001\002\000\006\005\ufff6\015\ufff6\001\002\000\006" +
    "\005\ufff8\015\ufff8\001\002\000\004\005\017\001\002\000" +
    "\006\005\ufff7\015\ufff7\001\002\000\004\017\020\001\002" +
    "\000\004\015\023\001\002\000\004\015\022\001\002\000" +
    "\006\002\ufffc\004\ufffc\001\002\000\006\002\ufffb\004\ufffb" +
    "\001\002\000\014\015\ufff4\016\014\020\012\021\013\024" +
    "\016\001\002\000\004\015\030\001\002\000\004\015\027" +
    "\001\002\000\006\002\ufff9\004\ufff9\001\002\000\006\002" +
    "\ufffa\004\ufffa\001\002\000\006\002\ufffd\004\ufffd\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\027\000\010\002\006\003\003\004\005\001\001\000" +
    "\004\004\030\001\001\000\004\005\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\025\006\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analizadorSintactico$actions {
  private final analizadorSintactico parser;

  /** Constructor */
  CUP$analizadorSintactico$actions(analizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analizadorSintactico$do_action_part00000000(
    int                        CUP$analizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$analizadorSintactico$parser,
    java.util.Stack            CUP$analizadorSintactico$stack,
    int                        CUP$analizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$analizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.elementAt(CUP$analizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.elementAt(CUP$analizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$analizadorSintactico$stack.elementAt(CUP$analizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$analizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.elementAt(CUP$analizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analizadorSintactico$parser.done_parsing();
          return CUP$analizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= stmts 
            {
              Object RESULT =null;
		int sbleft = ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.peek()).right;
		Object sb = (Object)((java_cup.runtime.Symbol) CUP$analizadorSintactico$stack.peek()).value;

              CUP$analizadorSintactico$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$analizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog ::= 
            {
              Object RESULT =null;

              CUP$analizadorSintactico$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$analizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmts ::= stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$analizadorSintactico$stack.peek()).value;

              CUP$analizadorSintactico$result = parser.getSymbolFactory().newSymbol("stmts",1, ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$analizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmts ::= stmts stmt 
            {
              Object RESULT =null;
		int sbleft = ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.elementAt(CUP$analizadorSintactico$top-1)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.elementAt(CUP$analizadorSintactico$top-1)).right;
		Object sb = (Object)((java_cup.runtime.Symbol) CUP$analizadorSintactico$stack.elementAt(CUP$analizadorSintactico$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$analizadorSintactico$stack.peek()).value;

              CUP$analizadorSintactico$result = parser.getSymbolFactory().newSymbol("stmts",1, ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.elementAt(CUP$analizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$analizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= SELECCIONAR expr FILTRAR expres SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.elementAt(CUP$analizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.elementAt(CUP$analizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$analizadorSintactico$stack.elementAt(CUP$analizadorSintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.elementAt(CUP$analizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.elementAt(CUP$analizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizadorSintactico$stack.elementAt(CUP$analizadorSintactico$top-1)).value;

              CUP$analizadorSintactico$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.elementAt(CUP$analizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$analizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= SELECCIONAR expr FILTRAR ARCHIVO SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.elementAt(CUP$analizadorSintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.elementAt(CUP$analizadorSintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$analizadorSintactico$stack.elementAt(CUP$analizadorSintactico$top-3)).value;

              CUP$analizadorSintactico$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.elementAt(CUP$analizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$analizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= SELECCIONAR ARCHIVO FILTRAR expres SEMICOLON 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.elementAt(CUP$analizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.elementAt(CUP$analizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizadorSintactico$stack.elementAt(CUP$analizadorSintactico$top-1)).value;

              CUP$analizadorSintactico$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.elementAt(CUP$analizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$analizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= SELECCIONAR ARCHIVO FILTRAR expr SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.elementAt(CUP$analizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.elementAt(CUP$analizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$analizadorSintactico$stack.elementAt(CUP$analizadorSintactico$top-1)).value;

              CUP$analizadorSintactico$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.elementAt(CUP$analizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$analizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= COLUMNA 
            {
              Object RESULT =null;

              CUP$analizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$analizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= TIMES 
            {
              Object RESULT =null;

              CUP$analizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$analizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= NUMBER 
            {
              Object RESULT =null;

              CUP$analizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$analizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= STRING 
            {
              Object RESULT =null;

              CUP$analizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$analizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= 
            {
              Object RESULT =null;

              CUP$analizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$analizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$analizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analizadorSintactico$do_action(
    int                        CUP$analizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$analizadorSintactico$parser,
    java.util.Stack            CUP$analizadorSintactico$stack,
    int                        CUP$analizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$analizadorSintactico$do_action_part00000000(
                               CUP$analizadorSintactico$act_num,
                               CUP$analizadorSintactico$parser,
                               CUP$analizadorSintactico$stack,
                               CUP$analizadorSintactico$top);
    }
}

}
